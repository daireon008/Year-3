#include<stdio.h>
#include<stdlib.h>
#include <string.h> //for strcpy and strcmp
#include <ctype.h>  //for isalnum


#define MAX_STRING_SIZE 20 //max length of a string
#define ARRAY_SIZE 99991  //best be prime

typedef struct Element Element;
struct Element{
    //TODO
    //name, freq, num collisions
    char name[MAX_STRING_SIZE];
    int freq;
    int num_collisions;
};

Element* hashTable[ARRAY_SIZE];

int hash_function(char* s){
    int hash = 0;
    while(*s){
        hash = hash + *s;
        s++;
    }
    return (hash % ARRAY_SIZE);
}

Element* createNewElement(char* name){
    // TODO
    // you might want to use the function strcpy from the string package here!
  
  Element* new_element;
  new_element = malloc(sizeof(Element));
  strcpy(new_element->name,name);
  new_element->freq = 1;
  new_element->num_collisions = 0;
  
  return new_element;
}


// returns the element with name name or NULL if the element is not present
Element* search (char* name){
    //TODO
  //see if hash of name get result
  //needs to go through whole array potentially
  //if there send back element
  //if not there send back null
  int hash;
  hash = hash_function(name);
  while(hashTable[hash]!=NULL){
    if(strcmp(hashTable[hash]->name,name)==0){
      return(hashTable[hash]);
    }
    else{
      hash++;
      if(hash == ARRAY_SIZE){
        hash = 0;
      }
    }
  }
  return NULL;
}


//searches the name in the array, if it is there increment its count, if not, add it
void addOrIncrement(char* name){
    //TODO
    //first set variables
    //then get hash,
    //Search table, start with hash, check null first then names
    //goto 'insert element'
    //include end case, loop around at 99991 to 0 and stop at hash 
  int hash = hash_function(name);//Get hash num
  int i = hash;
  //int collision;
  int done = 0;
  while(done != 1){
    if(hashTable[i] == NULL){//not in hashTable
      hashTable[i] = createNewElement(name);
      done = 1;
    }
    else if(strcmp(name, hashTable[i]->name) == 0){//Already in hash table
      hashTable[i]->freq = hashTable[i]->freq + 1;
      hashTable[i]->num_collisions = hashTable[i]->num_collisions + 1;
      done = 1;
    }
    else{//Move down hash table
      hashTable[i]->num_collisions = hashTable[i]->num_collisions + 1;
      i = i + 1;
    }
  }
  
}


// prints the number of occurences, or 0 if not in the file
void printNumberOfOccurences(char* name){
    int count=0;
		//TODO
        
		printf("%s - %i \n", name, count);

}

// function from the assignment 0
// Reads strings of alpha numeric characters from input file. Truncates strings which are too long to string_max-1
void next_token ( char *buf, FILE *f, int string_max ) {
	// start by skipping any characters we're not interested in
	buf[0] = fgetc(f);
	while ( !isalnum(buf[0]) && !feof(f) ) { buf[0] = fgetc(f); }
	// read string of alphanumeric characters
	int i=1;
	for (;;) {
		buf[i] = fgetc(f);                // get next character from file
		if( !isalnum(buf[i]) ) { break; } // only load letters and numbers
		if( feof(f) ) { break; }          // file ended?
		if( i < (string_max-1) ) { ++i; } // truncate strings that are too long
	}
	buf[i] = '\0'; // NULL terminate the string
}


//  Reads the contents of a file and adds them to the hash table - returns 1 if file was successfully read and 0 if not.
int load_file ( char *fname ) {
	FILE *f;
	char buf[MAX_STRING_SIZE];

	// boiler plate code to ensure we can open the file
	f = fopen(fname, "r");
	if (!f) { 
		printf("Unable to open %s\n", fname);
		return 0; 
	}
	
	// read until the end of the file
	while ( !feof(f) ) {
		next_token(buf, f, MAX_STRING_SIZE);
		addOrIncrement( buf);                           //here you call your function from above!
	}

	// always remember to close your file stream
	fclose(f);

	return 1;
}


int main()
{
    //first test insert and search
    //then move on to addOrIncrement
    //only then worry about loading the file
    //and later again about an interactive interface
  int f;
  int capacity = 0;
  int num_terms = 0;
  int collisions = 0;
  char file_name[MAX_STRING_SIZE] = "names.csv";
  char input[MAX_STRING_SIZE];
  Element* search_term;
  f = load_file(file_name);
  if(f==1){
  printf("File %s loaded\n",file_name);}

  for(int i=0;i<99991;i++){
    if(hashTable[i]!=NULL){
      //printf("%s \n",hashTable[i]->name);
      capacity = capacity + hashTable[i]->freq;
      num_terms = num_terms + 1;
      collisions = collisions + hashTable[i]->num_collisions;
      }
    }
  float load = num_terms;
  float load2 = capacity;
  float load3 = load/load2;
  printf(" Capacity: %d\n",capacity);
  printf(" Num Terms: %d\n",num_terms);
  printf(" Collisions: %d\n",collisions);
  printf(" Load: %f%%\n",load3);
  printf("Enter term to get frequency or type \"quit\" to escape\n");

while(1){
  //strcpy(input,"");;
  //scanf("%[^\n]s",input);
  //gets(input);
  //fgets(input,MAX_STRING_SIZE,stdin);
  scanf("%[^\n]%*c", input);
  if(strcmp(input,"quit")==0){
    printf(">>> ");
    return 0;
  }
  else{
    search_term = search(input);
  }

  if(search_term == NULL){
    printf(">>> %s - 0 \n",input);
  }
  else{
  printf(">>> %s - %d \n",search_term->name,search_term->freq);
  }
}
  return 0;
}
